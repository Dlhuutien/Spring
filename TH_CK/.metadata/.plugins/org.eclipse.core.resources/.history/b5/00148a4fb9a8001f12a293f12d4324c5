package fit.iuh.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import fit.iuh.entities.Product;
import fit.iuh.services.CategoryService;
import fit.iuh.services.ProductService;
import jakarta.validation.Valid;

@Controller
public class ProductController {

	@Autowired
	ProductService productService;

	@Autowired
	CategoryService categoryService;

	@GetMapping("/products")
	public String getList(Model model) {
		List<Product> products = productService.findAll();
		model.addAttribute("products", products);
		return "product/list";
	}

	@GetMapping("/products/add")
	public String showFrom(Model model) {
		model.addAttribute("product", new Product());
		model.addAttribute("categories", categoryService.findAll());
		return "product/addProduct";
	}

	@PostMapping("/products/add")
	public String addProduct(@Valid @ModelAttribute Product product, BindingResult result, Model model) {
		if (result.hasErrors()) {
			model.addAttribute("categories", categoryService.findAll());
			return "product/addProduct";
		}
		boolean exists = productService.existsByCategoryAndCode(product.getCategory().getId(), product.getCode());
		if (exists) {
			result.rejectValue("code", "error.product", "Product code đã tồn tại trong category");
			model.addAttribute("categories", categoryService.findAll());
			return "product/addProduct";
		}

		productService.addProduct(product);
		return "redirect:/products";
	}
	
	@GetMapping("/products/search")
	public String searchProducts(
	    @RequestParam(required = false) String categoryName,
	    @RequestParam(required = false) Boolean isActive,
	    @RequestParam(required = false) String dateFilter,
	    Model model) {
	    
	    LocalDate startDate = null;

	    if ("7days".equals(dateFilter)) {
	        startDate = LocalDate.now().minusDays(7);
	    } else if ("1month".equals(dateFilter)) {
	        startDate = LocalDate.now().minusMonths(1);
	    }

	    List<Product> products = productService.searchProducts(categoryName, isActive, startDate);
	    model.addAttribute("products", products);
	    return "product/list";
	}


}
